i = i + 1
}
print(total)
number=10
i = 1
total=0
while (i <= number) {
if (number %% 2 == 0) {
if (i %% 2 ==0) {
total = total + i
}
}
if (number %% 2 == 1) {
if (i %% 2 == 1) {
total = total + i
}
}
i = i + 1
}
print(total)
number=10
i = 1
total=0
while (i <= number) {
if (number %% 2 == 0) {
if (i %% 2 ==0) {
total = total + i
}
}
if (number %% 2 == 1) {
if (i %% 2 == 1) {
total = total + i
}
}
i = i + 1
}
print(total)
if (i %% 2 ==0) {
total = total + i
}
if (number %% 2 == 0) {
if (i %% 2 ==0) {
total = total + i
}
}
if (number %% 2 == 1) {
if (i %% 2 == 1) {
total = total + i
}
}
i = i + 1
while (i <= number) {
if (number %% 2 == 0) {
if (i %% 2 ==0) {
total = total + i
}
}
if (number %% 2 == 1) {
if (i %% 2 == 1) {
total = total + i
}
}
i = i + 1
}
print(total)
for (d in descriptions) {
for (a in animals) {
print(paste(d,a))
}
}
traceback()
descriptions = c('funny', 'cute', 'friendly')
animals = c('koala', 'cat', 'dog', 'panda')
for (d in descriptions) {
for (a in animals) {
print(paste(d,a))
}
}
for (d in descriptions) {
for (a in animals) {
print(paste(d,a))
}
}
if (message =+ "funny dog") {
if (message == "funny dog") {
print_message=FALSE
}
descriptions = c('funny', 'cute', 'friendly')
animals = c('koala', 'cat', 'dog', 'panda')
print_message=TRUE
for (d in descriptions) {
for (a in animals) {
message = (paste(d,a))
if (message == "funny dog") {
print_message=FALSE
}
if (print_message) {
print(mnessage)
}
}
}
print(message)
descriptions = c('funny', 'cute', 'friendly')
animals = c('koala', 'cat', 'dog', 'panda')
print_message=TRUE
for (d in descriptions) {
for (a in animals) {
message = (paste(d,a))
if (message == "funny dog") {
print_message=FALSE
}
if (print_message) {
print(message)
}
}
}
if (print_message) {
print(message)
}
for (a in animals) {
message = (paste(d,a))
if (message == "funny dog") {
print_message=FALSE
}
if (print_message) {
print(message)
}
}
for (d in descriptions) {
for (a in animals) {
message = (paste(d,a))
if (message == "funny dog") {
print_message=FALSE
}
if (print_message) {
print(message)
}
}
}
descriptions = c('funny', 'cute', 'friendly')
animals = c('koala', 'cat', 'dog', 'panda')
print_message=TRUE
for (d in descriptions) {
for (a in animals) {
message = (paste(d,a))
if (message == "funny dog") {
print_message=FALSE
}
if (print_message) {
print(message)
}
}
}
print (log10(1000))
return(F)
toFahrenheit <- function(Centigrade) {
F=9.0/5.0*Centigrade + 32.0
return(F)
}
toFahrenheit <- function(Centigrade) {
F=9.0/5.0*Centigrade + 32.0
return(F)
}
toFahrenheit <- function(Centigrade) {
F=9.0/5.0*Centigrade + 32.0
return(F)
}
Centigrade=3
print(F)
toFahrenheit <- function(Centigrade) {
Fah=9.0/5.0*Centigrade + 32.0
return(Fah)
}
toFahrenheit <- function(Centigrade) {
Fah=9.0/5.0*Centigrade + 32.0
return(Fah)
}
Centigrade=3
print(Fah)
Centigrade=3
toFahrenheit <- function(Centigrade) {
Fah=9.0/5.0*Centigrade + 32.0
return(Fah)
}
Centigrade=3
toFahrenheit <- function(Centigrade) {
Fah=9.0/5.0*Centigrade + 32.0
return(Fah)
}
toFahrenheit()
Centigrade=3
toFahrenheit()
toFahrenheit(5)
toFahrenheit(10)
print_greeting("Hello", "Bryan")
print_greeting <- function(greeting, name) {
print(paste(greeting, ",", name, "!"))
}
print_greeting("Hello", "Bryan")
print(paste(greeting,",", name,"!"))
print(paste(greeting, ",", name, "!"))
print_greeting <- function(greeting, name) {
print(paste(greeting, ",", name, "!"))
}
print_greeting("Hello", "Bryan")
print_greeting <- function(greeting, name) {
print(paste(greeting, ",", name, "!"))
}
print_greeting("Hello", "Bryan")
print_greeting("Hello")
print_greeting("Vee")
print_greeting <- function(name, greeting="Hello") {
print(paste(greeting, ",", name, "!"))
}
print_greeting("Vee")
print_greeting("Vee")
Countries = c('Germany'='Berlin','UK'='London')
print(country)
for (c in Countries) {
print names(c)
print (names(c))
print(c)
print(co)
print(k)
Countries = c('Germany'='Berlin','UK'='London')
for (k in Countries) {
print(k)
}
for (k in Countries) {
print(k)
}
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] <- Washington DC
print(Countries)
print(Countries)
Countries = c('Germany'='Berlin','UK'='London')
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
print(Countries)
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
Countries['Burkina Faso'] = 'Ouagadougou'
Countries['France'] = 'Paris'
for (c in Countries) {
print (c)
}
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
Countries['Burkina Faso'] = 'Ouagadougou'
Countries['France'] = 'Paris'
for (c in names(Countries) {
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
Countries['Burkina Faso'] = 'Ouagadougou'
Countries['France'] = 'Paris'
for (c in names(Countries) {
rint (paste(c,Countries[c]))
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
Countries['Burkina Faso'] = 'Ouagadougou'
Countries['France'] = 'Paris'
for (c in names(Countries)) {
print (paste(c,Countries[c]))
}
print (paste(Countries[c], c))
for (c in names(Countries)) {
print (paste(Countries[c], c))
}
print (paste(Countries[c], ',' , c))
for (c in names(Countries)) {
print (paste(Countries[c], ',' , c))
}
write.csv(df,file='Country capitals')
Countries['France'] = 'Paris'
write.csv(df,file='Country capitals')
write.table(df,file='Country capitals')
Countries = c('Germany'='Berlin','UK'='London')
Countries['United States'] = 'Washington DC'
Countries['Burkina Faso'] = 'Ouagadougou'
Countries['France'] = 'Paris'
write.table(df,file='Country capitals')
Countries = c('Germany'='Berlin','UK'='London', 'United States'='Washington DC', 'France'='Paris', 'Burkina Faso' = 'Ouagadougou')
Countries = c('Germany'='Berlin','UK'='London', 'United States'='Washington DC', 'France'='Paris', 'Burkina Faso' = 'Ouagadougou')
write.table(df,file='Country capitals')
Countries = c('Germany'='Berlin','UK'='London', 'United States'='Washington DC', 'France'='Paris', 'Burkina Faso' = 'Ouagadougou')
write.table(df,file='Country_capitals.csv')
write.table(df,file='Country_capitals.table')
write.table(Countries,"Countries_capitals.csv",sep=",",col.names=F)
Countries = c('Germany'='Berlin','UK'='London', 'United States'='Washington DC', 'France'='Paris', 'Burkina Faso' = 'Ouagadougou')
write.table(Countries,"Countries_capitals.csv",sep=",",col.names=F)
write.table(capitals,"capitals.csv",sep=",",col.names=F)
capitals = {
"Germany": "Berlin",
write.table(capitals,"capitals.csv",sep=",",col.names=F)
capitals = {
"Germany": "Berlin",
"Germany" = "Berlin",
"USA"= "Washington DC"
"France"= "Paris"
"Burkina Faso"= "Ouagadougou"
capitals = {
"Germany" = "Berlin"
"UK"= "London"
"USA"= "Washington DC"
"France"= "Paris"
"Burkina Faso"= "Ouagadougou"
}
write.table(capitals,"capitals.csv",sep=",",col.names=F)
capitals = {
"Germany" = "Berlin"
"UK"= "London"
"USA"= "Washington DC"
"France"= "Paris"
"Burkina Faso"= "Ouagadougou"
}
write.table(capitals,"capitals.csv",sep=",",col.names=F)
capitals = c("Germany" = "Berlin", "UK"= "London", "USA"= "Washington DC", "France"= "Paris", "Burkina Faso"= "Ouagadougou")
capitals = c("Germany" = "Berlin", "UK"= "London", "USA"= "Washington DC", "France"= "Paris", "Burkina Faso"= "Ouagadougou")
write.table(capitals,"capitals.csv",sep=",",col.names=F)
capitals = c('Germany' = 'Berlin')
write.table(capitals,"capitals.csv",sep=",",col.names=F)
print(paste0("Length: ", length(args)))
source("~/Coding Module/SEPwC_formative/R/todo.R")
source("~/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
if (!is.null(args$add)) {
add_task(args$add)
} else if (args$list) {
tasks <- list_tasks()
print(tasks)
} else if (!is.null(args$remove)) {
remove_task(args$remove)
} else {
print("Use --help to get help on using this program")
}
#!/usr/bin/env Rscript
suppressPackageStartupMessages({
library(argparse)
})
TASK_FILE <- ".tasks.txt" # nolint
add_task <- function(task) {
}
list_tasks <- function() {
}
remove_task <- function(index) {
}
main <- function(args) {
if (!is.null(args$add)) {
add_task(args$add)
} else if (args$list) {
tasks <- list_tasks()
print(tasks)
} else if (!is.null(args$remove)) {
remove_task(args$remove)
} else {
print("Use --help to get help on using this program")
}
}
if (sys.nframe() == 0) {
# main program, called via Rscript
parser <- ArgumentParser(description = "Command-line Todo List")
parser$add_argument("-a", "--add",
help = "Add a new task")
parser$add_argument("-l", "--list",
action = "store_true",
help = "List all tasks")
parser$add_argument("-r", "--remove",
help = "Remove a task by index")
args <- parser$parse_args()
main(args)
}
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
suppressPackageStartupMessages({
library(argparse)
})
suppressPackageStartupMessages({
library(testthat)
})
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
if (!is.null(args$add)) {
add_task(args$add)
} else if (args$list) {
tasks <- list_tasks()
print(tasks)
} else if (!is.null(args$remove)) {
remove_task(args$remove)
} else {
print("Use --help to get help on using this program")
}
list_tasks <- function() {
task_list <- c()
print("Works")
print(task_list)
print("Still works")
}
list_tasks()
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_task()
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks <- function() {
print(TASK_FILE)
}
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks <- function() {
print(TASK_FILE)
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
list_tasks <- function() {
print(TASK_FILE)
print("Works")
}
list_tasks()
list_tasks <- function() {
print(TASK_FILE)
print("Works")
}
remove_task <- function(index) {
}
main <- function(args) {
if (!is.null(args$add)) {
add_task(args$add)
} else if (args$list) {
tasks <- list_tasks()
print(tasks)
} else if (!is.null(args$remove)) {
remove_task(args$remove)
} else {
print("Use --help to get help on using this program")
}
}
if (sys.nframe() == 0) {
# main program, called via Rscript
parser <- ArgumentParser(description = "Command-line Todo List")
parser$add_argument("-a", "--add",
help = "Add a new task")
parser$add_argument("-l", "--list",
action = "store_true",
help = "List all tasks")
parser$add_argument("-r", "--remove",
help = "Remove a task by index")
args <- parser$parse_args()
main(args)
}
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
source("H:/Coding Module/SEPwC_formative/R/todo.R")
list_tasks()
TASK_FILE <- "test_list.txt" # nolint
add_task <- function(task) {
}
list_tasks <- function() {
tasks <- readLines(TASK_FILE)
counter <- 1
output_string <- ""
for (item in tasks) {
if (counter < length(tasks)) { #Looks for the end of the task list
output_string <- paste0(output_string, counter, ". ", item, "\n")
counter <- counter + 1
}
else {
output_string <- paste0(output_string, counter, ". ", item) #Removes \n from the end of the list
}
}
print(output_string)
}
list_tasks()
setwd("~/Coding Module/SEPwC_formative/R")
list_tasks()
remove_task(1)
source("H:/Coding Module/SEPwC_formative/R/todo.R")
remove_task(1)
TASK_FILE <- "test_list.txt" # nolint
add_task <- function(task) {
}
list_tasks <- function() {
tasks <- readLines(TASK_FILE)
counter <- 1
output_string <- ""
for (item in tasks) {
if (counter < length(tasks)) { #Looks for the end of the task list
output_string <- paste0(output_string, counter, ". ", item, "\n")
counter <- counter + 1
}
else {
output_string <- paste0(output_string, counter, ". ", item) #Removes \n from the end of the list
}
}
return(output_string)
}
list_tasks()
source("H:/Coding Module/SEPwC_formative/R/todo.R")
